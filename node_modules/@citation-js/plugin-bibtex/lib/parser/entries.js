"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseEntry = parseEntry;
exports.parse = parse;

var _config = _interopRequireDefault(require("../config"));

var _biblatex = require("../mapping/biblatex");

var _value = require("./value");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function parseEntry(entry) {
  const output = {};

  if ('language' in entry.properties) {
    output.language = (0, _value.parse)(entry.properties.language, 'language');
  }

  for (const property in entry.properties) {
    const value = entry.properties[property];
    output[property] = (0, _value.parse)(value, property, output.language);
    console.log(property, value, output[property]);
  }

  return _objectSpread(_objectSpread({}, entry), {}, {
    properties: output
  });
}

function parse(entries) {
  return (0, _biblatex.parse)(entries.map(parseEntry));
}